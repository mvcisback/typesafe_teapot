MP3:
author: Marcell Vazquez-Chanlatte

3 credit hours

video: https://www.youtube.com/watch?v=ItZbiPuhPlw&feature=youtu.be
screenshots: in the screenshots dir

Language: Haskell

Libraries:
see mp3.cabal

Build Instructions:
After acquiring all the dependencies listed in mp3.cabal
Generate Lexer
$ alex Tokens.x
Generate Parser
$ happy Parser.y
Build Renderer
$ ghc Main.hs -o mp3

About GPipe:
- GPipe is an purely functiona, staticly typed _alternative_ to OpenGL.
- It does not include many of the built in features such as texture mapping, lighting, or world transformations.
- I wrote almost ALL the features as shaders

Usage:
- Expects an Obj file to come in from stdin (I was originally gonna write an obj synthesis program for combining objects....but got sick)
- All other options can be seen by using --help


For example: A lighting shader and transformation shader
    seeliger norm (color,_) = RGB $ color * Vec.vec (ifB (s ==* 0 &&* t ==* 0) 0 (s / (s + t)))
             where s = maxB (norm `dot` light) 0
                   t = maxB (norm `dot` view) 0

    transform angle (width:.height:.()) (pos, norm, uv) = (transformedPos, (transformedNorm, uv))
        where
            modelMat = rotationVec (normalize (1:.0.5:.0.3:.())) angle `multmm` translation (-0.5)
            viewMat = translation (-(0:.0:.5:.()))
            projMat = perspective 1 100 (pi/3) (fromIntegral width / fromIntegral height)
            viewProjMat = projMat `multmm` viewMat
            transformedPos = toGPU (viewProjMat `multmm` modelMat) `multmv` (homPoint pos :: Vec4 (Vertex Float))
            transformedNorm = toGPU (Vec.map (Vec.take n3) $ Vec.take n3 modelMat) `multmv` norm

Relevent Files:
Main.hs: option parser
Render.hs: renderer
Objs.hs: Obj -> Triangle Stream
Parser.y: Grammar for Obj
Tokens.x: Tokens for Parser

Features:
- perspective,
- hidden surfaces (via the z-buffer),
- shading using the Phong surface reflection model,
- texture mapping
- environment mapping.

Bonus Features:
- Seeliger lighting model
- Bump mapping
- general obj parsing
